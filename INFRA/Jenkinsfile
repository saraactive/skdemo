pipeline {
    //Hardcoded predefined configuration..
     environment { 
        SAFE_GIT_PROJECT     = 'git@github.ibm.com:DisasterReachoutSupport/infra-devops.git' // DevOps Repo
        SAFE_GIT_REL_DIR     = 'infradeployment' //Code relative dir
        SAFE_GIT_USER        = 'jenkins_slave'
        SAFE_STASH_NAME      = 'iaas'//Stash name
       // TERRAFORM_MODULE_PATH = 'infradeployment/modules'
        SAFE_TERRAFORM_VERSION    = '0.12.24'
        //TF_LOG_LOCAL         = 'TRACE'         
        EMAIL_NOTIFICATION   = 'rparokka@in.ibm.com'
     }
    //Note that the label (image ot be used) it's resolved before the Jenkins pipeline is executed
     agent{
        node{
               label (env.SAFE_BUILD_DOCKER_IMAGE)
               //label 'kube_pod_slave' 
               //label 'jenkins_dstagent'
        } 
     }
     //tools{terraform "terraform"}
     stages{
        //Produces a set of variables to be used by build stages.
        stage('Init'){
            steps{
                //Clean up the workspace!!!
                dir("${WORKSPACE}"){
                    deleteDir()
                }

        
                    // List of varibales from configuration!
                    // We translate one by one to local vars
                    // to have a single point where we can see at a glance all of them.
                script{
                    SAFEAPP_CLIENT_LOCAL                  =   env.SAFEAPP_CLIENT
                    SAFEAPP_ENV_LOCAL                     =   env.SAFEAPP_ENV
                    SAFEAPP_SERVICE_LOCAL                 =   env.SAFEAPP_SERVICE
                    SAFE_GIT_PROJECT_LOCAL                =   env.SAFE_GIT_PROJECT
                    DEPLOYMENT_ACTION_LOCAL               =   env.DEPLOYMENT_ACTION
                    SAFE_GIT_BRANCH_LOCAL           =   env.SAFE_GIT_BRANCH //"devops"
                    SAFE_GIT_USER_LOCAL             =   env.SAFE_GIT_USER //"jenkins_slave"
                    SAFE_GIT_REL_DIR_LOCAL          =   env.SAFE_GIT_REL_DIR 
                       
                }
                 println 'SAFE_GIT_BRANCH_LOCAL      = ' + SAFE_GIT_BRANCH_LOCAL
                 println 'SAFEAPP_CLIENT_LOCAL       = ' + SAFEAPP_CLIENT_LOCAL
                 println 'SAFEAPP_ENV_LOCAL          = ' + SAFEAPP_ENV_LOCAL
                 println 'DEPLOYMENT_ACTION_LOCAL     = ' + DEPLOYMENT_ACTION_LOCAL
                 println 'SAFEAPP_SERVICE_LOCAL      = ' + SAFEAPP_SERVICE_LOCAL


                                   
            }
        }
         stage('GIT INFRA Deployment checkout'){
            steps {
                dir(SAFE_GIT_REL_DIR){
                    script{
                        scmVars = git branch: SAFE_GIT_BRANCH_LOCAL, credentialsId: SAFE_GIT_USER, url: SAFE_GIT_PROJECT
                        GIT_COMMIT = scmVars.GIT_COMMIT
                        echo 'GIT commit = ' + scmVars.GIT_COMMIT
                        //Stash the Helm charts directory: this is required because Helm charts can be run only from a dedicate node
                        //use option -x to get rid of all unuseful files from the chart dir.
                    }
                }
            }
        } 

     stage('install_deps') {
        steps {
            sh 'sudo apt install wget zip python-pip -y'
            sh 'cd /tmp'
            sh "curl -o terraform.zip https://releases.hashicorp.com/terraform/'$SAFE_TERRAFORM_VERSION'/terraform_'$SAFE_TERRAFORM_VERSION'_linux_amd64.zip"
            sh 'unzip terraform.zip'
            sh 'sudo mv terraform /usr/bin'
            sh 'rm -rf terraform.zip'
            sh 'sudo terraform -version'
            sh 'export TF_LOG=TRACE'
            
        } 
    }   

    stage('TerraForm Init') {
        steps {
            dir(SAFE_GIT_REL_DIR){ 
                sh 'ls -a'
                sh 'sudo terraform init'
               // sh "sudo terraform plan -var-file=variables.tfvars -target=modules.ibmcloud_resourcegroup"
            //notifySlack("Build completed! Build logs from jenkins server $jenkins_server_url/jenkins/job/$JOB_NAME/$BUILD_NUMBER/console", notification_channel, [])
           }
        }   
    }

    stage('Terraform Action Plan') {
         when { expression { return DEPLOYMENT_ACTION_LOCAL.contains('plan') } }
         steps {
               dir(SAFE_GIT_REL_DIR){
                   sh "sudo terraform '$DEPLOYMENT_ACTION_LOCAL' -var-file=clients/variables_'$SAFEAPP_CLIENT_LOCAL'_'$SAFEAPP_ENV_LOCAL'.tfvars -target=module.ibmcloud_'$SAFEAPP_SERVICE_LOCAL'"
                }       
            }
    }   

    stage('Terraform Action Apply & Delete') {
         when { expression { return DEPLOYMENT_ACTION_LOCAL.contains('apply') } }
             steps {
               dir(SAFE_GIT_REL_DIR){
                   sh "sudo terraform '$DEPLOYMENT_ACTION_LOCAL' -var-file=clients/variables_'$SAFEAPP_CLIENT_LOCAL'_'$SAFEAPP_ENV_LOCAL'.tfvars -target=module.ibmcloud_'$SAFEAPP_SERVICE_LOCAL' -auto-approve "
                }       
            }
    } 

 }
     
    post {
        always {
            step([$class: 'Mailer', recipients: EMAIL_NOTIFICATION, sendToIndividuals: true])
        } 
    }                                   
}
